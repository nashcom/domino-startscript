
# Domino Download Server
# ----------------------------
# - Provides software downloads
# - Requires LUA to invoke the domdownload bash script to download software not yet present in the file system.
# - Simulates the MHS API to download software used by Domino AutoUpdate
# - Allows to download software.jwt required for Domino AutoUpdate functionality

server {
        error_log stderr ${NGINX_LOG_LEVEL};
        listen ${NGINX_PORT} ssl;
        listen [::]:${NGINX_PORT} ssl;
        server_name _;

        # Access control via IP addresses/ranges

        satisfy any;
        allow 127.0.0.1;

        # Include for allow files (can be more than one, default: allow.access)
        include /etc/nginx/conf.d/*.access;
        deny all;

        auth_basic  "Domino Download Server";
        auth_basic_user_file /etc/nginx/conf.d/htpasswd;

        root /local/software;

        # Certificate and Key
        ssl_certificate      /etc/nginx/conf.d/cert.pem;
        ssl_certificate_key  /etc/nginx/conf.d/key.pem;

        # Only allow automatic MHS download for certain types (even the server is protected)
        location ~* \.(tgz|tar|tar\.gz|zip|bin|exe|dmg)$|/(autoinstall|daostune)\w* {
           root       /local/software;
           error_page 404 /domdownload/$request_uri;
        }

        location /about {

            limit_except GET HEAD {deny all;}
            default_type 'text/plain';

            content_by_lua_block {
                local file = io.popen("/usr/local/bin/domdownload -version")
                local result = file:read("*a")
                file:close()
                ngx.say('Nash!Com Domino Download ' .. result)
            }
        }

        location ~ ^/(refresh|reload) {

            limit_except GET HEAD {deny all;}
            default_type 'text/plain';

            content_by_lua_block {
                local file = io.popen("/upd_catalog.sh")
                local result = file:read("*a")
                file:close()
                ngx.log(ngx.NOTICE, 'Update catalog result: [' .. result .. ']')
                ngx.redirect("/index.html")
            }
        }

        location /software.jwt.latest {
            limit_except GET HEAD {deny all;}
            default_type 'text/plain';

            content_by_lua_block {
                local file = io.popen("/usr/local/bin/domdownload software.jwt 2>&1")
                local result = file:read("*a")
                file:close()
                file = io.open("/local/software/software.jwt", "r")
                ngx.say(file:read("*a"))
                file:close()
            }
        }

        location /v1/apitokens/exchange {
            limit_except GET HEAD POST {deny all;}
            default_type 'application/json';

            content_by_lua_block {
                ngx.say('{"refreshToken": "dummy","accessToken": "JWT","tokenType": "Bearer","expiresIn": 3600}')
            }
        }

        location /v1/files/ {
            limit_except GET HEAD {deny all;}
            default_type 'text/plain';

            content_by_lua_block {
                ngx.log(ngx.NOTICE, "FilesURL [" .. ngx.var.request_uri .. "]")

                local file = io.popen("/usr/local/bin/domdownload -mapfileid=" .. ngx.var.request_uri .. " 2>&1")
                local result = file:read("*a")
                file:close()

                ngx.log(ngx.NOTICE, 'Result: [' .. result .. ']')

                if result == nil or result == '' then
                    ngx.exit(501)
                else
                    ngx.redirect('/'..result)
                end
            }
        }

        location ^~ /domdownload/ {
            internal;
            limit_except GET HEAD {deny all;}
            default_type 'text/plain';

            content_by_lua_block {

                local file
                if ngx.var.request_uri == '/software.jwt' then
                    file = io.popen("/usr/local/bin/domdownload software.jwt 2>&1")

                elseif ngx.var.request_uri == '/product.jwt' then
                    file = io.popen("/usr/local/bin/domdownload product.jwt 2>&1")

                else
                    file = io.popen("/usr/local/bin/domdownload " .. ngx.var.request_uri .. " -silent 2>&1")
                end

                local result = file:read("*a")
                file:close()

                local DownloadFile = ngx.var.document_root .. ngx.var.request_uri
                ngx.log(ngx.NOTICE, "DominoDownload [" .. ngx.var.request_uri .. "] --> [" .. DownloadFile .. "] :", result)

                if os.execute('test -e ' .. DownloadFile) then
                    local target = ngx.var.request_uri
                    ngx.redirect(target)
                else
                    ngx.exit(501)
                end
            }
        }

        location / {
            index index.html;
            autoindex off;
        }
    }

