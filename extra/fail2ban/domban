#!/bin/bash

###########################################################################
# Domino Fail2Ban integration management script                           #
# Version 1.1.0 15.06.2022                                                #
#                                                                         #
# (C) Copyright Daniel Nashed/NashCom 2022                                #
# Feedback domino_unix@nashcom.de                                         #
#                                                                         #
# Licensed under the Apache License, Version 2.0 (the "License");         #
# you may not use this file except in compliance with the License.        #
# You may obtain a copy of the License at                                 #
#                                                                         #
#      http://www.apache.org/licenses/LICENSE-2.0                         #
#                                                                         #
# Unless required by applicable law or agreed to in writing, software     #
# distributed under the License is distributed on an "AS IS" BASIS,       #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.#
# See the License for the specific language governing permissions and     #
# limitations under the License.                                          #
###########################################################################

# Change history

# Version 1.1.0 15.06.2022
# ------------------------
# Blocking based on TLS/SSL errors with an additional filter string
#


nsh_cmp()
{
  if [ -z "$1" ]; then
    return 1
  fi

  if [ -z "$2" ]; then
    return 1
  fi

  if [ ! -e "$1" ]; then
    return 1
  fi

  if [ ! -e "$2" ]; then
    return 1
  fi

  if [ -x /usr/bin/cmp ]; then
    cmp -s "$1" "$2"
    return $?
  fi

  HASH1=$(sha256sum "$1" | cut -d" " -f1)
  HASH2=$(sha256sum "$2" | cut -d" " -f1)

  if [ "$HASH1" = "$HASH2" ]; then
    return 0
  fi

  return 1
}

install_file()
{
  SOURCE_FILE=$1
  TARGET_FILE=$2
  OWNER=$3
  GROUP=$4
  PERMS=$5

  if [ ! -r "$SOURCE_FILE" ]; then
    echo "[$SOURCE_FILE] Can not read source file"
    return 1
  fi

  if [ -e "$TARGET_FILE" ]; then

    nsh_cmp "$SOURCE_FILE" "$TARGET_FILE"
    if [ $? -eq 0 ]; then
      echo "[$TARGET_FILE] File did not change -- No update needed"
      return 0
    fi

    if [ ! -w "$TARGET_FILE" ]; then
      echo "[$TARGET_FILE] Can not update file -- No write permissions"
      return 1
    fi

    if [ $? -eq 1 ]; then
      echo "[$TARGET_FILE] Error - Can not update file -- File in use"
      return 1
    fi
  fi

  cp -f "$SOURCE_FILE" "$TARGET_FILE"

  if [ -n "$OWNER" ]; then
    chown $OWNER:$GROUP "$TARGET_FILE"
  fi

  if [ -n "$PERMS" ]; then
    chmod "$PERMS" "$TARGET_FILE"
  fi

  echo "[$TARGET_FILE] copied"

  return 2
}


print_delim ()
{
  echo "--------------------------------------------------------------------------------"
}

log_err()
{
  echo
  echo $@
  echo
}


install_fail2ban_firewalld()
{

  if [ ! -x /usr/sbin/firewalld ]; then
    log_err "Firewalld not installed - Skipping configuration!"
    exit 1
  fi

  echo
  echo "Firewalld detected"
  echo

  dnf install epel-release -y
  dnf install fail2ban -y

}

install_fail2ban_ufw()
{

  if [ ! -x /usr/sbin/ufw ]; then
    log_err "UFW not installed - Skipping configuration!"
    exit 1
  fi

  echo
  echo "UFW detected"
  echo

   apt update
   apt install fail2ban -y

}


install_fail2ban()
{
  local JAIL_LOCAL=

  if [ "$EUID" != "0" ]; then
    log_err "Please swith to 'root' user for installation!"
    exit 1
  fi

  if [ -x /usr/bin/dnf ]; then

    install_fail2ban_firewalld
    JAIL_LOCAL="$SCRIPT_DIR/jail.local"

  elif [ -x /usr/bin/apt-get ]; then

    install_fail2ban_ufw
    JAIL_LOCAL="$SCRIPT_DIR/jail.local.ufw"

  else

    log_err "Unsupported Linux distribution"
    exit 1
  fi

  install_file "$SCRIPT_DIR/domino.conf" "/etc/fail2ban/filter.d/domino.conf" root root 644
  install_file "$SCRIPT_DIR/domban" "/usr/bin/domban" root root 755

  if [ -e /etc/fail2ban/jail.local ]; then

    if [ "$2" = "upd" ]; then
      install_file "$JAIL_LOCAL" "/etc/fail2ban/jail.local" root root 644
    else
      log_err "Please review '/etc/fail2ban/jail.local' or use 'install upd' to overwrite existing config!"
    fi
  else
    install_file "$JAIL_LOCAL" "/etc/fail2ban/jail.local" root root 644
  fi

  systemctl enable fail2ban
  systemctl restart fail2ban

  if [ -x /usr/sbin/getenforce ]; then
    SELINUX_STATUS=$(getenforce)
    if [ "$SELINUX_STATUS" = "Enforcing" ]; then
      echo "Info: SELinux is set to enforced!"
      echo "Ensure fail2ban can read the Domino log file!"
    fi
  fi
}


fail2ban()
{
  SCRIPT_DIR=$(dirname $0)

  if [ "$EUID" = "0" ]; then
    SUDO=
  else
    SUDO=sudo
    echo "Info: Not the root user, trying sudo"
  fi
  
  # Get configuration first
  DOMINO_CONFIG_FILE=/etc/sysconfig/rc_domino_config
  . $DOMINO_CONFIG_FILE 

  if [ -z "$EDIT_COMMAND" ]; then
    EDIT_COMMAND=vi
  fi

  if [ -z "$DOMINO_DATA_PATH" ]; then
    DOMINO_DATA_PATH=/local/notesdata
  fi

  if [ -z "$DOMINO_LOG_DIR" ]; then
    DOMINO_LOG_DIR=$DOMINO_DATA_PATH
  fi

  if [ -z "$DOMINO_OUTPUT_LOG" ]; then
    DOMINO_OUTPUT_LOG=$DOMINO_LOG_DIR/notes.log
  fi

  if [ "$1" = "help" ]; then
    echo
    echo "Domino Fail2Ban"
    echo "---------------"
    echo
    echo "Syntax: domban"
    echo
    echo "ssh              Show status of SSH jail (No parameter = show Domino jail)"
    echo "unblock <IP>     Unblock IP from Domino and SSH jail"
    echo "cfg              Configure fail2ban jail.local. Editor: vi. Use e.g. export EDIT_COMMAND=nano"
    echo "log [lines]      List fail2ban log (default: last 100 lines)"
    echo "status           Show systemd fail2ban status"
    echo "restart          Restart fail2ban service"
    echo "systemd [cmd]    Pass commands to systemd"
    echo "install [upd]    Install fail2ban and 'domban' script - 'upd' overwrites existing 'jail.local'"
    echo "test [logfile]   Test filter against logfile"
    echo "-                No parameter shows Domino jail status"
    echo
    echo "selinux          Show SELinux status"
    echo "selinux logset   Lable start script log file with fail2ban access"
    echo "selinux logdel   Remove label for start script log"
    echo "selinux relable  Relable log files"
    echo
   
    return 0
  fi

  if [ "$1" = "install" ]; then
    install_fail2ban
    return 0
  fi

  # Check if installed
  if [ ! -x /usr/bin/fail2ban-client ]; then
    log_err "fail2ban is not installed!"
    return 1
  fi

  # Without parameters show current status of Domino jail
  if [ -z "$1" ]; then
    echo
    print_delim
    $SUDO fail2ban-client status domino
    print_delim
    echo
    return 0
  fi

  if [ "$1" = "cfg" ]; then
    $SUDO $EDIT_COMMAND /etc/fail2ban/jail.local
    return 0
  fi

  # Show sshd status
  if [ "$1" = "restart" ]; then
    $SUDO systemctl restart fail2ban 
    return 0
  fi

  # Show sshd status
  if [ "$1" = "ssh" ]; then
    echo
    print_delim
    $SUDO fail2ban-client status sshd
    print_delim
    echo
    return 0
  fi

  # Unblock specified IP
  if [ "$1" = "unblock" ]; then

    if [ -z "$2" ]; then
      log_err "No IP to unblock specified!"
      return 1
    fi

    $SUDO fail2ban-client set domino unbanip $2
    $SUDO fail2ban-client set sshd unbanip $2
    return 0
  fi

  # systemd status
  if [ "$1" = "status" ]; then
      echo
      print_delim
      systemctl status fail2ban
      print_delim
      echo

      return 0
  fi


  # systemd commands
  if [ "$1" = "systemd" ]; then

    if [ -z "$2" ]; then
      echo
      print_delim
      systemctl status fail2ban
      print_delim
      echo
      return 0
    fi

    # Passthru systemd commands
    case "$2" in
      start|stop|status|restart|enable|disable)
        $SUDO systemctl $2 fail2ban
        return 0
        ;;
    esac

    log_err "Unkown systemd option: $2"
    return 1 
  fi

  # Show fail2ban log
  if [ "$1" = "log" ]; then

    if [ -z "$2" ]; then
      tail -100 /var/log/fail2ban.log
      return 0
    fi

    if [ "$2" = "edit" ]; then
      $EDIT_COMMAND /var/log/fail2ban.log
      return 0
    fi

    if [ "$2" = "more" ]; then
      more /var/log/fail2ban.log
      return 0
    fi

    case "$2" in
      [0-9]*)
        tail -$2 /var/log/fail2ban.log
        return 0
        ;;
    esac

    log_err "Unkown log option: $2"
    return 1
  fi

  # Test Domino filter against log 
  if [ "$1" = "test" ]; then

    if [ -z "$2" ]; then
      TEST_LOG="$DOMINO_OUTPUT_LOG"
    else

      case "$2" in
        -*)
          TEST_PARAM="$2"
          ;;

        *)
          TEST_LOG="$2"
          ;;
      esac

      if [ -n "$3" ]; then
        TEST_PARAM="$3"
      fi
    fi

    if [ ! -r "$TEST_LOG" ]; then
      log_err "Cannot read test log file: $TEST_LOG"
      return 1
    fi

    echo
    print_delim
    echo "Testing $TEST_LOG"
    print_delim

    fail2ban-regex "$TEST_LOG" /etc/fail2ban/filter.d/domino.conf $TEST_PARAM

    print_delim
    echo
    return 0
  fi

  # SELinux configurtion 
  if [ "$1" = "selinux" ]; then

    if [ ! -x /usr/sbin/getenforce ]; then
      echo "No SELinux tools installed. Try to install package 'selinux-utils'"
      return 1
    fi

    SELINUX_STATUS=$(getenforce)

    if [ -z "$DOMINO_OUTPUT_LOG" ]; then
      LOG_STATUS="not defined"

    elif [ ! -e "$DOMINO_OUTPUT_LOG" ]; then
      LOG_STATUS="not existing"

    elif [ ! -r "$DOMINO_OUTPUT_LOG" ]; then
      LOG_STATUS="cannot read"

    else

      SELINUX_DIR=$(dirname "$DOMINO_OUTPUT_LOG")

      if [ -e "$SELINUX_DIR/names.nsf" ]; then
        echo
        print_delim
        echo "Unsupported Domino Fail2Ban log configuration for SELinux!"
        print_delim
        echo

        echo "Please configure Start Script log directory to different directory then data directory."
        echo "SELinux lables files automatically based on the directory in which the files are created."
        echo "The standard location /local/notesdata/notes.log, would require the Domino data directory would be fail2ban accessible."
        echo "Therefore the log directory should be stored outside the data directory."        
        echo
        echo "- Run 'domino cfg' and specify a different directory for 'DOMINO_LOG_DIR and DOMINO_LOG_BACKUP'" 
        echo "- Run 'domino restart' to restart your server to use the new log file location"
        echo
        echo "Example:"
        echo "  DOMINO_LOG_DIR=/local/log/current"
        echo "  DOMINO_LOG_BACKUP_DIR=/local/log/archive"
        echo 
        return 1 
      fi

      case "$2" in

        "")
          ;;

        relable)
          echo "SELinux - Relabeling $SELINUX_DIR"
          restorecon -R -v "$SELINUX_DIR" 
          ;;

        logdel)
          echo "SELinux - Deleting fail2ban_log_t attribute for $SELINUX_DIR"
          semanage fcontext -d "$SELINUX_DIR(/.*)?"
          echo "SELinux - Relabeling $SELINUX_DIR"
          restorecon -R -v "$SELINUX_DIR" 
          ;;

        logset)
          echo "SELinux - Setting fail2ban_log_t attribute for $SELINUX_DIR"
          semanage fcontext -a -t fail2ban_log_t "$SELINUX_DIR(/.*)?"
          echo "SELinux - Relabeling $SELINUX_DIR"
          restorecon -R -v "$SELINUX_DIR" 
          ;;

        *)
          log_err "Unknown selinux option: $2"
          return 1
           ;;
        esac
 
      SELINUX_FILE=$(ls -Z "$DOMINO_OUTPUT_LOG")

      if [ -z "$(echo $SELINUX_FILE | grep fail2ban_log_t)" ]; then
        LOG_STATUS="fail2ban permission missing"
      else
        LOG_STATUS="OK"
      fi
    fi

    echo
    print_delim
    echo "Domino Fail2Ban SELinux Status"
    print_delim
    echo
    echo "SELinux Status   :  $SELINUX_STATUS"
    echo "Domino log file  :  $DOMINO_OUTPUT_LOG"
    echo "Log Status       :  $LOG_STATUS"
    echo

    return 0
  fi

  log_err "Unknown option: '$1'"
  return 1
}

fail2ban $@


